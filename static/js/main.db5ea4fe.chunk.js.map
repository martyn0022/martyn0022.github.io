{"version":3,"sources":["styles/MUItheme.js","App.js","ThemeApp.js","serviceWorkerRegistration.js","index.js"],"names":["theme","overrides","MuiCssBaseline","html","minHeight","background","typography","fontFamily","join","fontSize","h6","lineHeight","fontWeight","body","button","palette","primary","main","contrastText","secondary","default","paper","useStyles","makeStyles","root","width","display","flexDirection","justifyContent","alignItems","backgroundColor","color","padding","spacing","text","textTransform","textAlign","maxWidth","content","subtitle","body1","footer","icon","App","props","classes","height","use100vh","CssBaseline","className","style","topic","IconButton","onClick","window","open","HomeRounded","GitHub","Reddit","ThemeApp","ThemeProvider","createMuiTheme","baseTheme","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","confirm"],"mappings":"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","file":"static/js/main.db5ea4fe.chunk.js","sourcesContent":["var theme = {\n    overrides: {\n        MuiCssBaseline: {\n            '@global': {\n                html: {\n                    minHeight: 'calc(100% + env(safe-area-inset-top))',\n                    //padding: 'env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left)'            \n                },\n                '.fullscreen-enabled': {\n                    background: '#fff'\n                }\n            },\n        },\n    },\n    typography: {\n        fontFamily: [\n            'Helvetica Neue',\n            'Helvetica',\n            'Arimo',\n            'Arial',\n            'sans-serif',\n        ].join(','),\n        fontSize: 12,\n        h6: { \n            fontSize: 15,\n            lineHeight: 1.2,\n            fontWeight: 700, \n        },\n        body: {\n            fontSize: 12,\n        },\n        button: {\n            fontSize: 12,\n            fontWeight: 700,\n        },\n    },\n    palette: {\n        primary: {\n            main:  '#c10016',\n            contrastText: '#ffffff',\n        },\n        secondary: {\n            main: '#c10016',\n            contrastText: '#ffffff',\n        },\n        background: {\n            default: '#ffffff',\n            paper:   '#f6f6f6',\n        }\n    },\n}\n\nexport default theme;","import { makeStyles, CssBaseline, IconButton } from '@material-ui/core'\nimport { GitHub, HomeRounded, Reddit } from '@material-ui/icons'\nimport { use100vh } from 'react-div-100vh';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    //height: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n    padding: theme.spacing(0, 4),\n  },\n  text: {\n    fontFamily: theme.typography.fontFamily,\n    fontSize: '1rem',\n    fontWeight: 700,\n    textTransform: 'uppercase',\n    textAlign: 'left',\n    maxWidth: 400,\n  },\n  content: {\n    padding: theme.spacing(0, 2),\n  },\n  subtitle: {\n    ...theme.typography.body1,\n    textTransform: 'none',\n    padding: theme.spacing(0, 2),\n  },\n  footer: {\n    textAlign: 'right'\n  },\n  icon: {\n    color: theme.palette.primary.contrastText,\n  },\n}));\n\nfunction App(props) {\n  const classes = useStyles();\n\n  const height = use100vh();\n\n  return (\n    <>\n      <CssBaseline/>\n      <div className={classes.root} style={{height: `calc(${height}px + env(safe-area-inset-top))`}}>\n        <div className={classes.text}>\n          <p className={classes.topic}>To: Not Strangers</p>\n          <p className={classes.content}>\n            This app is discontinued since 18 Aug, 2021 per request by the official WNRS. <br/><br/>\n            Thank you for all the support. Hope we will meet again soon.\n          </p>\n          <p className={classes.subtitle}>I would like to sincerely thanks everyone who have supported this application whether through Reddit or email. Your support means a lot to me. I hear your concerns about the accessibility of WNRS and your request for the application, but it is not my decision to release these resources without permission from the official WNRS. <br/><br/> Until then, take care. ü§ç</p>\n          <p className={classes.footer}>- Jon</p>\n        </div>\n        <div>\n          <IconButton onClick={() => window.open(\"https://werenotreallystrangers.com\")}>\n            <HomeRounded className={classes.icon} />\n          </IconButton>\n          <IconButton onClick={() => window.open(\"https://github.com/jonathan-lph/wnrs\")}>\n            <GitHub className={classes.icon}/>\n          </IconButton>\n          <IconButton onClick={() => window.open(\"https://www.reddit.com/r/cardgames/comments/nf47ps/were_not_really_strangers_online\")}>\n            <Reddit className={classes.icon}/>\n          </IconButton>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import baseTheme from  './styles/MUItheme'\nimport { ThemeProvider, createMuiTheme, CssBaseline } from '@material-ui/core'\n\nimport App from './App'\n\nfunction ThemeApp() {\n  return (\n    <ThemeProvider theme={createMuiTheme(baseTheme)}>\n      <CssBaseline/>\n      <App/>\n    </ThemeProvider>\n  );\n}\n\nexport default ThemeApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n  \nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}","import { StrictMode } from 'react';\nimport { render } from 'react-dom';\nimport ThemeApp from './ThemeApp';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nrender(\n  <StrictMode>\n    <ThemeApp />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register({\n  onUpdate: () => {\n    const shouldReload = window.confirm(\"New version available. Please completely reload this app.\");\n    shouldReload && window.location.reload();\n  },\n});"],"sourceRoot":""}